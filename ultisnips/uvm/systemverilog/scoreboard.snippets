#===================================================================================================
#
#   Target Code     :   SystemVerilog
#   Version         :   v1.0.0
#
#   Description     :   UVM based scoreboard snippets
#
#   Additional info :   Get instruction with ":help UltiSnips".
#                       Use "snippet" or "sn" to trigger snippet for snippet edition.
#
#   Author          :   TBD9rain
#   Email           :
#
#===================================================================================================

snippet class "UVM Scoreboard" b
class ${1:Scoreboard}${2: #(
	parameter type TXN = ${3:Txn}
)} extends uvm_scoreboard;
	\`uvm_component`!p snip.rv='_param' if t[2] else ''`_utils($1`!p snip.rv=' #(TXN)' if t[2] else ''`)

	//  variable definition
	TXN exp_txn_q[$];
	uvm_blocking_get_port #(TXN) omon_getp;
	uvm_blocking_get_port #(TXN) mdl_getp;$0

	function new(string name="$1", uvm_component parent=null);
		super.new(name, parent);
	endfunction

	function void build_phase(uvm_phase phase);
		super.build_phase(phase);
		omon_getp = new("omon_getp", this);
		mdl_getp = new("mdl_getp", this);
	endfunction

	task main_phase(uvm_phase phase);
		TXN tmp_txn;
		TXN exp_txn;
		TXN act_txn;
		bit txn_equal;

		fork
			forever begin
				mdl_getp.get(tmp_txn);
				exp_txn_q.push_front(tmp_txn);
			end
			forever begin
				omon_getp.get(act_txn);
				if (exp_txn_q.size() > 0) begin
					exp_txn = exp_txn_q.pop_back();
					txn_equal = act_txn.compare(exp_txn);
					if (txn_equal) begin
						\`uvm_info("Scb", "expected output and actual output match.", UVM_MEDIUM)
					end
					else begin
						\`uvm_error("Scb", "expected output and actual output mismatch.")
						\`uvm_info("Scb", "expected output:", UVM_NONE)
						exp_txn.print();
						\`uvm_info("Scb", "actual output:", UVM_NONE)
						act_txn.print();
					end
				end
				else begin
					\`uvm_error("Scb", "unexpected DUT output with no input.")
				end
			end
		join
	endtask
endclass
endsnippet


