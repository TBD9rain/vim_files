#===================================================================================================
#
#   Target Code     :   SystemVerilog
#   Version         :   v1.0.1
#
#   Description     :   verification top
#
#   Additional info :   Get instruction with ":help UltiSnips".
#                       Use "snippet" or "sn" to trigger snippet for snippet edition.
#
#   Author          :   TBD9rain
#   Email           :
#
#===================================================================================================

snippet TestEnv "test environment skeleton" bw
class ${1:TestEnv}${2: #()};
	//  input transaction class
	typedef InputTxn${3: #()} INPUT_TXN;
	typedef OutputTxn${4: #()} OUTPUT_TXN;

	virtual interface ${5:if_name} vif;

	ClockCnt clk_cnt;

	InputSeq${6: #()} seq;
	InputAgent${7: #()} input_agt;
	CovCollector${8: #()} cov_coll;
	OutputAgent${9: #()} output_agt;

	RefModel${10: #()} ref_mdl;
	Scoreboard${11: #()} scr_brd;

	mailbox #(INPUT_TXN) i2cov_mbox;
	mailbox #(INPUT_TXN) i2ref_mbox;
	mailbox #(INPUT_TXN) i2score_mbox;

	mailbox #(OUTPUT_TXN) o2score_mbox;
	mailbox #(OUTPUT_TXN) ref2score_mbox;

	event tc_done;

	bit drive_en;
	bit cover_en;$0

	function new(
		bit drive_en = 1'b1,
		bit cover_en = 1'b1);

		this.drive_en = drive_en;
		this.cover_en = cover_en;

		this.clk_cnt = new();
		if (this.drive_en) begin
			this.seq = new();
		end
		this.input_agt = new(this.drive_en);
		if (this.cover_en) begin
			this.cov_coll = new();
		end
		this.output_agt = new();
		this.ref_mdl = new();
		this.scr_brd = new();

		if (this.cover_en) begin
			this.i2cov_mbox = new();
		end
		this.i2ref_mbox = new();
		this.i2score_mbox = new();
		this.o2score_mbox = new();
		this.ref2score_mbox = new();

		print_msg($typename(this), "initialization completed.", INFO, HIGHEST, LOG);
	endfunction

	function void connect;
		if (drive_en) begin
			seq.seqr = input_agt.seqr;
		end

		clk_cnt.vif = vif;
		input_agt.vif = vif;
		output_agt.vif = vif;
		scr_brd.vif = vif;

		input_agt.i2cov_mbox = i2cov_mbox;
		input_agt.i2ref_mbox = i2ref_mbox;
		input_agt.i2score_mbox = i2score_mbox;

		if (cover_en) begin
			cov_coll.i2cov_mbox = i2cov_mbox;
		end

		output_agt.o2score_mbox = o2score_mbox;

		ref_mdl.i2ref_mbox = i2ref_mbox;
		ref_mdl.ref2score_mbox = ref2score_mbox;

		scr_brd.i2score_mbox = i2score_mbox;
		scr_brd.o2score_mbox = o2score_mbox;
		scr_brd.ref2score_mbox = ref2score_mbox;

		input_agt.connect;
		output_agt.connect;

		if (drive_en) begin
			tc_done = input_agt.tc_done;
		end

		print_msg($typename(this), "connection completed.", INFO, HIGHEST, LOG);
	endfunction

	task run;
		fork
			clk_cnt.run;
			input_agt.run;
			if (cover_en) begin
				cov_coll.run;
			end
			output_agt.run;
			ref_mdl.run;
			scr_brd.run;
		join_none
	endtask

	task add_case(
		InputTxn txn_data);

		seq.add_case(txn_data);
	endtask

	task add_random_tc(
		longint unsigned case_num = 1);

		seq.gen_rand_tc(case_num);
	endtask

	function real get_coverage(
		ref int num_bins_covered,
		ref int num_bins_total);

		get_coverage = cov_coll.get_coverage(num_bins_covered, num_bins_total);
	endfunction
endclass
endsnippet

snippet package "verification environment package" bw
package ${1:pkg_name};

//=====================
//  PACKAGE IMPORTATION
//=====================

${2:import msg_print_pkg::*;}


//==================
//  CLASS DEFINITION
//==================

\`include "InputTxn.sv"
\`include "OutputTxn.sv"
\`include "ClockCnt.sv"
\`include "InputSeqr.sv"
\`include "InputSeq.sv"
\`include "InputDrv.sv"
\`include "InputMon.sv"
\`include "InputAgent.sv"
\`include "CovCollector.sv"
\`include "OutputMon.sv"
\`include "OutputAgent.sv"
\`include "RefModel.sv"
\`include "Scoreboard.sv"
\`include "TestEnv.sv"$0


endpackage
endsnippet

