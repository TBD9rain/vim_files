#===============================================================
# get help with ":help UltiSnips"
#
# Type "sn" or "snippet" to trigger snippet for snippet creating
#===============================================================

snippet "//  head info" "automatic filling head info" b
//==================================================================================================
//
//  Project         :   ${1}
//  File            :   `!p snip.rv=fn`
//  Version         :   v${2:1.0.0}
//  Title           :   `!p import os; name, ext = os.path.splitext(fn); snip.rv = name`
//
//  Description     :   $0
//
//  Additional info :
//  Author          :   `!p import os; snip.rv = os.getenv('USERNAME') or os.getenv('USER');`
//  Email           :
//
//===============================================================================
endsnippet

snippet "todo" "to do message" rbA
//  TODO
//  ${1:what to do}
//  BY `!p import os; snip.rv = os.getenv('USERNAME') or os.getenv('USER');` AT `!v strftime("%Y-%m-%d %H:%M")`
$0
endsnippet

snippet always "sequential always block" b
always @(${1|posedge,negedge|} ${2:clk} or ${3|posedge,negedge|} ${4:rst_n}) begin
	if (`!p snip.rv = '~' if t[3]=='negedge' else ''`$4) begin
		$0
	end
	else begin
	end
end

endsnippet

snippet begin "begin end block" wA
begin
	$0
end
endsnippet

snippet function "function definition" bA
function automatic ${1:func_name};
	begin
		$0
	end
endfunction
endsnippet

snippet task "task definition" bA
task automatic ${1:task_name};
	begin
		$0
	end
endtask
endsnippet

snippet "param(eter)?" "dynamic width parameter" rb
parameter   ${1:DYNAMIC_WIDTH} = (${2:DATA_DEPTH} > 2) ? \$clog2($2) : 1;
endsnippet

