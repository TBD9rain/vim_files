#===================================================================================================
#
#   Target Code     :   SystemVerilog
#   Version         :   v1.1.1
#
#   Description     :   DUT in out transaction
#
#   Additional info :   Get instruction with ":help UltiSnips".
#                       Use "snippet" or "sn" to trigger snippet for snippet edition.
#
#   Author          :   TBD9rain
#   Email           :
#
#===================================================================================================

snippet class "DUT input transaction skeleton" b
class ${1:InputTxn}${2: #()};
	//  variable definition
	${3|rand,randc|} bit [${4: 7}: 0] ${5:var_name};$0

	//  timing check variable
	longint unsigned timestamp;

	function new(
		input bit [$4: 0] $5 = 0,
		input longint unsigned timestamp = 0);

		this.$5 = $5;
		this.timestamp = timestamp;
	endfunction

	function string print;
		print = $sformatf({
			"$5 : %0d\n",
			}, $5):
	endfunction
endclass
endsnippet

snippet class "DUT output transaction skeleton" b
class ${1:OutputTxn}${2: #()};
	//  variable definition
	logic [${3: 7}: 0] ${4:var_name};$0

	//  timing check variable
	longint unsigned timestamp;

	function new(
		input logic [$3: 0] $4 = 0,
		input longint unsigned timestamp = 0);

		this.$4 = $4;
		this.timestamp = timestamp;
	endfunction

	function string print;
		print = $sformatf({
			"$4 : %0d\n",
			}, $4):
	endfunction

	function bit compare(
		input OutputTxn txn);

		compare = (txn.$4 === $4);
	endfunction
endclass
endsnippet

snippet class "clock counter for timestamp" b
class ${1:ClockCnt};
	virtual interface ${2:if_name}.env_mp vif;

	longint unsigned clk_cnt;

	function new();
		this.clk_cnt = 0;$0
		print_msg($typename(this), "initialization completed.", INFO, MEDIUM, LOG);
	endfunction

	task run;
		forever begin
			@vif.env_cb;
			clk_cnt++;
			vif.env_cb.clk_cnt  <= clk_cnt;
		end
	endtask
endclass
endsnippet

snippet class "testcase sequencer skeleton" b
class ${1:InputSeqr}${2: #()};

	//  input transaction class
	typedef InputTxn${3: #()} INPUT_TXN;

	mailbox #(INPUT_TXN) seqr_mbox;

	longint unsigned txn_num;

	event tc_done;

	function new();
		this.seqr_mbox = new();
		this.txn_num = 0;$0
		print_msg($typename(this), "initialization completed.", INFO, MEDIUM, LOG);
	endfunction

	task put(
		input INPUT_TXN txn_data);

		seqr_mbox.put(txn_data);
		txn_num++;
	endtask

	task get(
		output INPUT_TXN txn_data);

		assert (txn_num > 0) begin
			seqr_mbox.get(txn_data);
			txn_num--;
			if (txn_num == 0) begin
				-> tc_done;
			end
		end
		else begin
			txn_data = null;
		end
	endtask

	function longint unsigned num();
		num = txn_num;
	endfunction
endclass
endsnippet

snippet class "testcase sequence skeleton" b
class ${1:InputSeq}${2: #()};
	//  input transaction class
	typedef InputTxn${3: #()} INPUT_TXN;

	InputSeqr seqr;

	function new();
		print_msg($typename(this), "initialization completed.", INFO, MEDIUM, LOG);
	endfunction

	task gen_rand_tc(
		input longint unsigned tc_num = 1);

		INPUT_TXN txn_data;

		for(int i = 0; i < tc_num; i++) begin
			txn_data = new();
			assert(txn_data.randomize())
			else begin
				print_msg($typename(this), "randomization failed.", FATAL, HIGHEST, STOP);
			end
			seqr.put(txn_data);
		end$0
		print_msg($typename(this), $sformatf("added %0d random testcases.", tc_num), INFO, HIGH, LOG);
	endtask

	task add_case(
		input InputTxn txn_data);

		seqr.put(txn_data);
	endtask
endclass
endsnippet

