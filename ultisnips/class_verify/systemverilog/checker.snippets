#===================================================================================================
#
#   Target Code     :   SystemVerilog
#   Version         :   v1.0.3
#
#   Description     :   DUT output check
#
#   Additional info :   Get instruction with ":help UltiSnips".
#                       Use "snippet" or "sn" to trigger snippet for snippet edition.
#
#   Author          :   TBD9rain
#   Email           :
#
#===================================================================================================

snippet class "reference model skeleton" b
class ${1:RefModel}${2: #()};
	//  input transaction class
	typedef InputTxn${3: #()} INPUT_TXN;
	typedef OutputTxn${4: #()} OUTPUT_TXN;

	mailbox #(INPUT_TXN) i2ref_mbox;
	mailbox #(OUTPUT_TXN) ref2score_mbox;

	function new();
		print_msg($typename(this), "initialization completed.", INFO, MEDIUM, LOG);
	endfunction

	task run;
		INPUT_TXN txn_in;
		OUTPUT_TXN txn_ref;

		forever begin
			i2ref_mbox.get(txn_in);
			$11(txn_in, txn_ref);
			ref2score_mbox.put(txn_ref);
		end
	endtask

	funciton ${11:dut_ref_func_name}(
		input INPUT_TXN txn_in,
		output OUTPUT_TXN txn_ref);

		$0
	endfunction
endclass
endsnippet

snippet class "scoreboard skeleton" b
class ${1:Scoreboard}${2: #()};
	//  input transaction class
	typedef InputTxn${3: #()} INPUT_TXN;
	typedef OutputTxn${4: #()} OUTPUT_TXN;

	virtual interface ${5:if_name}.env vif;

	mailbox #(INPUT_TXN) i2score_mbox;
	mailbox #(OUTPUT_TXN) o2score_mbox;
	mailbox #(OUTPUT_TXN) ref2score_mbox;

	longint unsigned ptn_cnt;

	function new();
		this.ptn_cnt    = 0;
		print_msg($typename(this), "initialization completed.", INFO, MEDIUM, LOG);
	endfunction

	task run;
		string  msg;

		INPUT_TXN txn_in;
		OUTPUT_TXN txn_out;
		OUTPUT_TXN txn_ref;

		forever begin
			@vif.env_cb;
			if (~vif.rst_n && o2score_mbox.num() == 0) begin
				//  clear mailbox
				while (i2score_mbox.try_get(txn_in)) begin
					msg = $sformatf({
						"Testcase ABORTED due to reset:\n",
						"\tNO.%0d\n",
						txn_in.print
						}, ptn_cnt);
					ptn_cnt++;

					print_msg($typename(this), msg, WARN, HIGH, LOG);
				end
				while (ref2score_mbox.try_get(txn_ref)) begin end

				txn_out = null;
				txn_in  = null;
				txn_ref = null;

				continue;
			end

			o2score_mbox.get(txn_out);
			i2score_mbox.get(txn_in);
			ref2score_mbox.get(txn_ref);

			//  output check
			assert (txn_out.compare(txn_ref)) begin
				msg = $sformatf({
					"Testcase passed:\n",
					"\tNO.%0d\n",
					txn_in.print, "\n",
					"out ", txn_out.print,
					"ref ", txn_ref.print
					}, ptn_cnt);

				print_msg($typename(this), msg, INFO, DEBUG, LOG);
			end
			else begin
				msg = $sformatf({
					"Testcase passed:\n",
					"\tNO.%0d\n",
					txn_in.print, "\n",
					"out ", txn_out.print,
					"ref ", txn_ref.print
					}, ptn_cnt);

				print_msg($typename(this), msg, ERROR, HIGH, STOP);
			end

			//  timing check
			assert (timing_check(txn_in, txn_out))
			else begin
				msg = $sformatf({
					"Testcase NO. %0d timing error:\n",
					"\tinput time : %d\n",
					"\toutput time: %d\n"
					}, ptn_cnt, txn_in.timestamp, txn_out.timestamp);

				print_msg($typename(this), msg, ERROR, HIGH, STOP);
			end

			ptn_cnt++;
		end
	endtask

	function bit output_check(
		input OUTPUT_TXN txn_out,
		input OUTPUT_TXN txn_ref);

		output_check = (txn_out.${6:data} === txn_ref.$6);$0
	endfunction

	function bit timing_check(
		input INPUT_TXN txn_in,
		input OUTPUT_TXN txn_out);

		timing_check = (txn_out.timestamp - txn_in.timestamp) == ${8:?};
	endfunction
endclass
endsnippet

